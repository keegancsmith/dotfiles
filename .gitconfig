[user]
name = Keegan Carruthers-Smith
email = keegan.csmith@gmail.com

[alias]
l = log --color --graph --pretty=format:'%C(yellow)%h%Creset %s%C(yellow)%d\n%C(bold blue)(%cr by %an)%Creset\n' --abbrev-commit --
st = status
b = for-each-ref --sort=committerdate refs/heads/ --format='%(HEAD) %(align:20,left)%(color:yellow)%(refname:short)%(color:reset)%(end) %(objectname:short)%(color:reset) %(color:blue)%(upstream:track)%(color:reset) %(contents:subject) (%(color:green)%(committerdate:relative)%(color:reset))'
br = branch -vv
feature = !sh -c 'git checkout --no-track -b k/`date "+%Y%m%d"`-$0 origin/main'
set-upstream = !sh -c 'git branch --set-upstream-to=origin/master `git rev-parse --abbrev-ref HEAD`'
cherry-pick-branch = !sh -c 'git cherry-pick `git merge-base HEAD $0`..$0'
gc-all = -c gc.reflogExpire=0 -c gc.reflogExpireUnreachable=0 -c gc.rerereresolved=0 -c gc.rerereunresolved=0 -c gc.pruneExpire=now gc
me = log --author=keegan
checkout-branch = !sh -c 'git fetch origin $0 && git checkout -b $0 FETCH_HEAD'
pr = !sh -c 'git fetch -fu origin refs/pull/$0/head:pr/$0 && git checkout pr/$0'

[color]
ui = auto

[color "branch"]
current = yellow reverse
local = yellow
remote = green

[color "diff"]
meta = yellow bold
frag = magenta bold
old = red bold
new = green bold

[color "status"]
added = yellow
changed = green
untracked = cyan

[core]
excludesfile = ~/.gitignore_global

[diff]
compactionHeuristic = true

[http]
  cookiefile = ~/.gitcookies

[github]
  user = keegancsmith

[ghq]
  root = /Users/keegan/src
  root = /Users/keegan/go/src
[merge]
  conflictStyle = diff3
[pull]
  rebase = true
[url "git@github.com:"]
  insteadOf = https://github.com/
[init]
	defaultBranch = main

[merge "bazel-lockfile-merge"]
	name = Merge driver for the Bazel lockfile (MODULE.bazel.lock)
	driver = "jq -s '# Merges an arbitrary number of MODULE.bazel.lock files.\n#\n# Input: an array of MODULE.bazel.lock JSON objects (as produced by `jq -s`).\n# Output: a single MODULE.bazel.lock JSON object.\n#\n# This script assumes that all files are valid JSON and have a numeric\n# \"lockFileVersion\" field. It will not fail on any such files, but only\n# preserves information for files with a version of 10 or higher.\n#\n# The first file is considered to be the base when deciding which values to\n# keep in case of conflicts.\n\n# Like unique, but preserves the order of the first occurrence of each element.\ndef stable_unique:\n  reduce .[] as $item ([]; if index($item) == null then . + [$item] else . end);\n\n# Given an array of objects, shallowly merges the result of applying f to each\n# object into a single object, with a few special properties:\n# 1. Values are uniquified before merging and then merged with last-wins\n#    semantics. Assuming that the first value is the base, this ensures that\n#    later occurrences of the base value do not override other values. For\n#    example, when this is called with B A1 A2 and A1 contains changes to a\n#    field but A2 does not (compared to B), the changes in A1 will be preserved.\n# 2. Object keys on the top level are sorted lexicographically after merging,\n#    but are additionally split on \":\". This ensures that module extension IDs,\n#    which start with labels, sort as strings in the same way as they due as\n#    structured objects in Bazel (that is, //python/extensions:python.bzl\n#    sorts before //python/extensions/private:internal_deps.bzl).\ndef shallow_merge(f):\n  map(f) | stable_unique | add | to_entries | sort_by(.key | split(\":\")) | from_entries;\n\n(\n    # Ignore all MODULE.bazel.lock files that do not have the maximum\n    # lockFileVersion.\n    (map(.lockFileVersion) | max) as $maxVersion\n    | map(select(.lockFileVersion == $maxVersion))\n    | {\n        lockFileVersion: $maxVersion,\n        registryFileHashes: shallow_merge(.registryFileHashes),\n        selectedYankedVersions: shallow_merge(.selectedYankedVersions),\n        # Group extension results by extension ID across all lockfiles with\n        # shallowly merged factors map, then shallowly merge the results.\n        moduleExtensions:  (map(.moduleExtensions | to_entries)\n                           | flatten\n                           | group_by(.key)\n                           | shallow_merge({(.[0].key): shallow_merge(.value)}))\n    }\n)? //\n    # We get here if the lockfiles with the highest lockFileVersion could not be\n    # processed, for example because all lockfiles have lockFileVersion < 10.\n    # In this case Bazel 7.2.0+ would ignore all lockfiles, so we might as well\n    # return the first lockfile for the proper \"mismatched version\" error\n    # message.\n    .[0]' -- %O %A %B > %A.jq_tmp && mv %A.jq_tmp %A"
